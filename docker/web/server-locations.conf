# 'location' directives for a Talkyard server block a.k.a. virtual host.
# Included by server .conf files, which in turn are included at the end of nginx.conf.
#
# """You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration """
#


# ----- HTTPS
#
# HTTPS public and private keys are located in /etc/letsencrypt/, and included
# not-from-this-file but from the sites-available/*.conf files.

#ssl_certificate...  – defined in sites-available/*.conf instead
# ssl_...  – defined in nginx.conf

# Magic files for generating HTTPS certificates with Let's Encrypt.
location /.well-known {
  alias /opt/nginx/html/.well-known;
  #autoindex off; – module disabled [5KUP293]
}


# ----- WebSocket and Long Polling
#
# This is for *subscribing* to events. *Publishing* events, however, is instead
# confiured in nginx.conf, and done on port 81 (not 80 or 443).

# SECURITY SHOULD FAIR Use Nchan channel groups, to track aggregate channel usage, and set limits
# on the number of channels, subscribers, stored messages, memory use, etc, per site.
# https://nchan.io/#limits-and-accounting
location /-/pubsub/subscribe/ {   # sync path with service worker [7BKXA02]
  # Disable ./ed-lua/lua-limit-bandwidth/log-phase.lua, because there's sometimes a segfault
  # somewhere from within Lua, if the browser has done `theXhrRequest.abort()`.
  # (about how disable: https://github.com/openresty/lua-nginx-module/issues/871 )
  # Here I posted about the segfault: https://github.com/openresty/lua-nginx-module/issues/1361
  # But is this really because of Talkyard's lua log phase? The not-modified header is instead
  # set by Ncahn, does maybe Nchan use Lua too?
  # COULD FAIR QUOTA reenable the log phase, so if really long comments get sent via notfs,
  # that affects the bandwidth used for the connected clients.
  # Don't disable the access-phase.lua though — we do want to reject clients that have used up
  # all their bandwidth quota.
  # log_by_lua_block { return } — didn't work, segfault in Nginx anyway [NGXSEGFBUG]

  location ~ /-/pubsub/subscribe/(.*)$ {
    nchan_subscriber;
    nchan_channel_id "$1";
    nchan_subscriber_first_message newest;
    #nchan_use_redis on; [NCHANREDIS]

    # Maximum time a subscriber may wait for a message before being disconnected.
    # Sends a '408 Request Timeout' if possible, otherwise just disconnects.
    # Good to have, if the client disappears without a trace, so we won't remember
    # the connection for an annoyingly long time.
    # Should be a bit longer than the browser's long-polling abort() delay. [2ALJH9]
    # Try 'inverting': set to shorter than the browser's abort(), and see if then the
    # Nginx segfault won't happen so frequently. [NGXSEGFBUG]  (Because Nginx will cancel
    # the long polling requests, instead of the browser calling abort().)
    nchan_subscriber_timeout 40s;

    # Ask the appserver if this is okay, and in that way also tell it that this user
    # has now connected. (Apparently nchan forwards all cookies to the appserver.)
    # (Any '?' here gets url encoded and then no endpoint matches
    # so the app server replies 404 Not Found. So don't use the query string here.)
    # (This will match the 'location /' block below, which proxy_pass:es to app:9000.)
    nchan_authorize_request /-/pubsub/authorize-subscriber/$1;
  }
}


# ----- The Play Framework application server

location / {
  proxy_http_version 1.1;
  # The docker host has ip 172.17.0.1, for me. (also see [7YKFG32] below)
  # Read more here: https://docs.docker.com/v1.7/articles/networking/
  # and: https://github.com/docker/docker/issues/17305
  # and: http://stackoverflow.com/a/31213387/694469
  # ... Use Docker networking instead and hostname 'app'.
  proxy_pass http://app:9000/;

  # $host = the first servername, no port number.
  # $http_host = the Host header, if any.
  proxy_set_header Host  $http_host;
  # 16 random bytes.
  proxy_set_header X-Request-Id $request_id; # COULD update e2e test [5FK02FP]
  proxy_set_header X-Real-IP          $remote_addr;
  proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto  $scheme;
  proxy_connect_timeout  900;
  proxy_send_timeout     900;
  proxy_read_timeout     900;
  send_timeout           900;

  location ~ ^(/-/site/|/-/assets/|/favicon.ico) {  # ? BUG why not max-age 1 year, only 1 h ???
    proxy_pass http://app:9000$request_uri;
    proxy_cache EfDiCache;
    proxy_cache_valid  200 302   7d; # d = days
    proxy_cache_valid  404      10m; # m = minutes not months
    proxy_cache_key $request_uri;    # is like: '/-/assets/123/script.js' (no hostname included)
    add_header X-Cache-Status $upstream_cache_status;
  }
}

# If the app server isn't running, we'll show friendly instructions about how to start it.
location /502.html{
  root /opt/nginx/html/;
}

# Global scripts, e.g. a feedback widget, for admins at all sites, so they can report problems
# to the Talkyard developers. No assests versioning for now so don't cache for long.
# (Only admins load the file anyway.)
location ~ ^/-/(globalAdminTestScript|globalAdminScript|globalStaffScript)\.js$ {
  alias /opt/talkyard/uploads/public/$1.js;
  add_header Cache-Control "max-age=300, s-maxage=300, public";
}


# ----- Uploads

# The app server saves uploads to the directory indicated below, and here we configure Nginx
# to serve them directly from the file system.
# But before sending back an uploaded file, we ask the app server, via Lua and an Nginx subrequest,
# if it's ok for the client to download it.

# The path looks like: /-/u/pub-site-id/hash-path.
# There're older backw compat paths too [6FKW24].
# Bind regex captures to named variables ('pubSiteId', 'hashPath') because apparently the
# nested regex location (the one for mp4|m4v|m4a) "overwrites" $1, $2, $3 with its own captures.
location ~ ^/-/u/(?<pubSiteId>[^/][^/]+/)(?<hashPath>.*)$ {  # location one  [6FKW24]
  # Dupl code, see /-/uploads/public/ below.

  # (1. There's Nginx's http_auth_request_module module, but it handles upstream 404 Not Found
  # as an internal error. So it cannot both do auth, and check does-it-exist? at the same time.
  # 2. ngx.location.capture is synchronous, but non-blocking: the code execution stops, until
  # a response is received — but meanwhile, the nginx worker continues with other things.)
  access_by_lua '
    response = ngx.location.capture("/_auth_upload/" .. ngx.var.pubSiteId .. "/" .. ngx.var.hashPath)
    if response.status == 404 then
      ngx.status = 404
      -- Without text/plain, the response body just disappears somehow, for images (.jpg) at least.
      ngx.header.content_type = "text/plain"
      ngx.say("Not found. [TyNGXFKB604]")
      return ngx.exit(ngx.OK)
    end
    if response.status == 401 or response.status == 403 then
      ngx.status = response.status
      ngx.header.content_type = "text/plain"
      ngx.say("Access denied. [TyNGX5KWA2]")
      return ngx.exit(ngx.OK)
    end';

  # This dir is read-only mounted in the relevant docker-compose.yml, in the Nginx
  # container, and read-write mounted in the Play app container.
  alias /opt/talkyard/uploads/public/$hashPath;

  # access_log off; enable for now so I'll notice if Google's CDN doesn't cache this
  # autoindex off; – module disabled [5KUP293]

  # Make any CDN and browsers cache this. 2592000 is 30 days. SHOULD COULD_OPTIMIZE change to 365 later?
  add_header Cache-Control "max-age=2592000, s-maxage=2592000, public";

  # KeyCDN and CloudFlare (enterprise only) can purge cached items by tag. So tag with the site id
  # — then it'll be possible to quickly purge a whole site from the CDN.
  # (CloudFlare wants ',' and KeyCDN wants ' ' spaces between tags, but there's just one tag.
  # Docs: https://www.keycdn.com/support/purge-cdn-cache/
  # (Maybe add Fastly's and Varnish's Surrogate-Key header too? It works in the same way)
  add_header Cache-Tag $1;

  # sendfile, tcp_nopush, tcp_nodelay already configured in nginx.conf.

  location ~ \.(mp4|m4v|m4a)$ {
    mp4;
  }
  # (could: ~ .mp4.(m3u8|ts)$ { hls; }
  # ngx_http_hls_module & _f4f_ = commercial though)
}

location /_auth_upload/ {
  # Only for Nginx subrequests.
  internal;
  proxy_pass              http://app:9000/-/auth-upload/;
  proxy_pass_request_body off;
  proxy_set_header        Content-Length "";
  proxy_set_header        X-Original-URI $request_uri;
}


# Old. No site id, and too long (/-/uploads/public).
# LATER, SECURITY: Somehow rewrite/change all  /-/u/hash-path  to  /-/u/site-id/hash-path,
# and thereafter remove these endpoints.
location ~ ^(?:/-/u/|/-/uploads/public/)(?<hashPath>.*)$ {  # location two [6FKW24]
  # Dupl code, see /-/u/ above.
  alias /opt/talkyard/uploads/public/$hashPath;
  expires 31d;
  add_header Cache-Control public;
  location ~ \.(mp4|m4v|m4a)$ {
    mp4;
  }
}


# ----- Ping pong

location /-/ping-nginx {
  return 200 'pong';
  add_header Content-Type text/plain;
}

# vim: et ts=2 sw=2 tw=0 list
