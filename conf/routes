# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Only POST.
# Don't use PUT, DELETE or PATCH. Use POST only. That's simpler — one won't
# need to wonder, which method to use. Also, using only POST, encourages descriptive
# url paths, like '/delete-comment' instead of just /comment (and method DELETE)
# which is helpful when understanding what the url path does, and someone else
# didn't tell you which method hen had in mind.

# API calls
# Would be nice to change to <path>?login-simple / ?logout / etcetera,
# so the actual page will be included in the request. Then one would know
# on which page did the user start/end the session. But for now:

# Rare compilation problem tips:
# If there's ever again any impossibly weird error like:
#   [error] /home/kajmagnus/me-dev/debiki/all/debiki-server/conf/routes:14:
#     too many arguments for method apply:
#     (name: String, constraint: String)play.core.DynamicPart in object DynamicPart
#   [error] GET /-/login/:provider  controllers.AppLogin.loginWith(provider, returnToUrl)
# Then, in project/Build.scala, add nonTransitive() to perhaps the play-plugins-mailer
# dependency ? see:
#   https://groups.google.com/forum/?fromgroups=#!topic/play-framework/cVqBvywCs4k

GET   /-/login                  controllers.LoginController.showLoginPage(as: Option[String], to: Option[String])
GET   /-/login-popup            controllers.LoginController.showLoginPopup(mode, returnToUrl)
POST  /-/logout                 controllers.LoginController.logout(currentUrlPath: Option[String])
POST  /-/resend-owner-email-addr-verif-email controllers.LoginController.resendSiteOwnerAddrVerifEmail

POST  /-/login-guest            controllers.LoginAsGuestController.loginGuest
POST  /-/login-password         controllers.LoginWithPasswordController.login
POST  /-/login-password-create-user controllers.LoginWithPasswordController.handleCreateUserDialog
GET   /-/login-password-confirm-email controllers.LoginWithPasswordController.confirmEmailAddressAndLogin(confirmationEmailId, returnToUrl)
#GET   /-/login-openid       controllers.LoginWithOpenIdController.loginGet
#POST  /-/login-openid       controllers.LoginWithOpenIdController.loginPost
#GET   /-/login-openid-clbk  controllers.LoginWithOpenIdController.loginCallback(returnToUrl)
# also: /-/v0/sso-login via ApiV0Controller

GET   /-/login-openauth/:provider controllers.LoginWithOpenAuthController.startAuthentication(provider, returnToUrl)
GET   /-/login-auth-callback/:provider  controllers.LoginWithOpenAuthController.finishAuthentication(provider)
GET   /-/login-oauth-then-return/:provider controllers.LoginWithOpenAuthController.loginThenReturnToOriginalSite(provider, returnToOrigin, xsrfToken)
GET   /-/login-oauth-continue           controllers.LoginWithOpenAuthController.continueAtOriginalSite(oauthDetailsCacheKey, xsrfToken)
POST  /-/login-oauth-create-user  controllers.LoginWithOpenAuthController.handleCreateUserDialog

GET   /-/impersonate-at-other-site  controllers.ImpersonateController.impersonateAtOtherSite(siteId: Int, userId: Int)
GET   /-/impersonate-with-key   controllers.ImpersonateController.impersonateWithKey(key: String)
POST  /-/impersonate            controllers.ImpersonateController.impersonate(userId: Int)
POST  /-/view-as-other          controllers.ImpersonateController.viewAsOther(userId: Int)
POST  /-/stop-impersonating     controllers.ImpersonateController.stopImpersonating

GET   /-/pubsub/authorize-subscriber/:channelId  ed.server.pubsub.SubscriberController.authorizeSubscriber(channelId)
GET   /-/load-online-users                       ed.server.pubsub.SubscriberController.loadOnlineUsers

GET   /-/embedded-comments      controllers.EmbeddedTopicsController.showTopic(embeddingUrl, discussionId: Option[String], edPageId: Option[String])
GET   /-/embedded-editor        controllers.EmbeddedTopicsController.showEmbeddedEditor(embeddingUrl, discussionId: Option[String], edPageId: Option[String])

GET   /-/search                 controllers.SearchController.showSearchPage(q: Option[String])
POST  /-/search                 controllers.SearchController.doSearch

GET   /-/reset-password                  controllers.ResetPasswordController.start
GET   /-/reset-password/specify-email    controllers.ResetPasswordController.showResetPasswordPage
POST  /-/reset-password/specify-email    controllers.ResetPasswordController.handleResetPasswordForm
GET   /-/reset-password/email-sent       controllers.ResetPasswordController.showEmailSentPage(isEmailAddress)
GET   /-/reset-password/choose-password/:resetPasswordEmailId  controllers.ResetPasswordController.showChooseNewPasswordPage(resetPasswordEmailId)
POST  /-/reset-password/choose-password/:resetPasswordEmailId  controllers.ResetPasswordController.handleNewPasswordForm(resetPasswordEmailId)
POST  /-/send-reset-password-email       controllers.ResetPasswordController.sendResetPasswordEmail

GET   /-/create-site                        controllers.CreateSiteController.showPage(isTest = "false")
GET   /-/create-site/website                controllers.CreateSiteController.showPage(isTest = "false")
GET   /-/create-site/embedded-comments      controllers.CreateSiteController.showPage(isTest = "false")
GET   /-/create-test-site                   controllers.CreateSiteController.showPage(isTest = "true")
GET   /-/create-test-site/website           controllers.CreateSiteController.showPage(isTest = "true")
GET   /-/create-test-site/embedded-comments controllers.CreateSiteController.showPage(isTest = "true")
POST  /-/create-site                        controllers.CreateSiteController.createSite
POST  /-/delete-test-site                   controllers.CreateSiteController.deleteTestSite

GET   /-/admin-login            controllers.AdminController.showAdminOneTimeLoginPage
POST  /-/admin-login            controllers.AdminController.handleAdminOneTimeLoginForm
GET   /-/admin                  controllers.AdminController.redirectToAdminPage
GET   /-/admin/                 controllers.AdminController.viewAdminPage(whatever = "")
GET   /-/admin/*whatever        controllers.AdminController.viewAdminPage(whatever)
GET   /-/sso-test               controllers.AdminController.showTestSsoPage

GET   /-/load-site-settings     controllers.SettingsController.loadSiteSettings
POST  /-/save-site-settings     controllers.SettingsController.saveSiteSettings
POST  /-/change-hostname        controllers.SettingsController.changeHostname
POST  /-/update-extra-hostnames controllers.SettingsController.updateExtraHostnames

# LEGAL: SHOULD create /-/terms-of-use-for-owners, and /-/privacy-policy-for-owners.
# But for now, these are OK: (and says we can change them — the main change, would be to *remove* terms)
GET   /-/terms-of-use            controllers.LegalController.viewTermsOfUsePage
GET   /-/terms-for-site-owners   controllers.LegalController.viewTermsOfUsePage
GET   /-/privacy-policy          controllers.LegalController.viewPrivacyPolicyPage
GET   /-/privacy-for-site-owners controllers.LegalController.viewPrivacyPolicyPage

GET   /-/load-special-content   controllers.SpecialContentController.loadContent(rootPageId, contentId)
POST  /-/save-special-content   controllers.SpecialContentController.saveContent

GET   /-/load-review-tasks      controllers.ModerationController.loadReviewTasks
POST  /-/make-review-decision   controllers.ModerationController.makeReviewDecision
POST  /-/undo-review-decision   controllers.ModerationController.tryUndoReviewDecision

GET   /-/users/                 controllers.UserController.viewUserPage(whatever = "")
GET   /-/users/*whatever        controllers.UserController.viewUserPage(whatever)
GET   /-/load-my-page-data      controllers.UserController.loadMyPageData(pageId)
GET   /-/list-topics-by-user    controllers.UserController.listTopicsByUser(userId: Int)
GET   /-/list-posts             controllers.UserController.listPostsByUser(authorId: Int)
GET   /-/download-my-content    controllers.UserController.downloadUsersContent(authorId: Int)
GET   /-/download-personal-data controllers.UserController.downloadPersonalData(userId: Int)
POST  /-/track-reading          controllers.UserController.trackReadingProgress
POST  /-/track-reading-text     controllers.UserController.trackReadingProgressText
GET   /-/load-notifications     controllers.UserController.loadNotifications(userId: Int, upToWhenMs: Long)
POST  /-/mark-all-notfs-as-seen controllers.UserController.markAllNotfsAsSeen
POST  /-/mark-notf-as-seen      controllers.UserController.markNotificationAsSeen
POST  /-/set-page-notf-level    controllers.UserController.savePageNotfLevel
GET   /-/load-groups            controllers.UserController.loadGroups()
GET   /-/list-all-users         controllers.UserController.listAllUsers(usernamePrefix)
GET   /-/list-usernames         controllers.UserController.listUsernames(pageId, prefix)
POST  /-/save-about-member-prefs controllers.UserController.saveAboutMemberPrefs
POST  /-/save-about-group-prefs controllers.UserController.saveGroupPreferences
POST  /-/save-privacy-prefs     controllers.UserController.saveMemberPrivacyPrefs
POST  /-/save-guest             controllers.UserController.saveGuest
POST  /-/delete-user            controllers.UserController.deleteUser
# Currently ignores group inheritance of settings. [2WHK7PU0]
GET   /-/list-complete-users    controllers.UserController.listCompleteUsers(whichUsers)
GET   /-/load-user-any-details  controllers.UserController.loadUserAnyDetails(who)
POST  /-/edit-member            controllers.UserController.editMember
POST  /-/lock-trust-level       controllers.UserController.lockTrustLevel
POST  /-/unlock-trust-level     controllers.UserController.unlockTrustLevel
POST  /-/lock-threat-level      controllers.UserController.lockThreatLevel
POST  /-/unlock-threat-level    controllers.UserController.unlockThreatLevel
POST  /-/suspend-user           controllers.UserController.suspendUser
POST  /-/unsuspend-user         controllers.UserController.unsuspendUser
POST  /-/block-guest            controllers.UserController.blockGuest
POST  /-/unblock-guest          controllers.UserController.unblockGuest
GET   /-/load-author-blocks     controllers.UserController.loadAuthorBlocks(postId: Int)
GET   /-/redir-to-my-last-topic controllers.UserController.redirectToMyLastTopic

GET   /-/load-email-addrs-login-methods controllers.UserController.loadUserEmailsLogins(userId: Int)
POST  /-/set-primary-email-address controllers.UserController.setPrimaryEmailAddresses
POST  /-/add-email-address      controllers.UserController.addUserEmail
POST  /-/remove-email-address   controllers.UserController.removeUserEmail
GET   /-/confirm-email-address  controllers.UserController.confirmOneMoreEmailAddress(confirmationEmailId)
POST  /-/resend-email-addr-verif-email controllers.UserController.resendEmailAddrVerifEmail

GET   /-/unsubscribe            controllers.UnsubscriptionController.showForm(emailId)
POST  /-/unsubscribe            controllers.UnsubscriptionController.handleForm(emailId)
GET   /-/unsubscribed           controllers.UnsubscriptionController.showHasBeenUnsubscribed()

GET   /-/unsub-from-summaries   ed.server.summaryemails.UnsubFromSummariesController.showUnsubForm(emailId)
POST  /-/unsub-from-summaries   ed.server.summaryemails.UnsubFromSummariesController.handleForm
GET   /-/unsub-summaries-done   ed.server.summaryemails.UnsubFromSummariesController.showHasBeenUnsubscribed()

GET   /-/load-invites           controllers.InviteController.loadInvites(sentById: Int)
GET   /-/load-all-invites       controllers.InviteController.loadAllInvites
POST  /-/send-invite            controllers.InviteController.sendInvite
GET   /-/accept-invite/:key     controllers.InviteController.acceptInvite(key)

POST  /-/create-embedded-comments-site  controllers.EmbeddedTopicsController.createEmbeddedCommentsForum
POST  /-/create-forum           controllers.ForumController.createForum
GET   /-/list-forums            controllers.ForumController.listForums
GET   /-/list-topics            controllers.ForumController.listTopics(categoryId: Int)
GET   /-/list-categories-all-sections controllers.ForumController.listCategoriesAllSections
GET   /-/list-categories-topics controllers.ForumController.listCategoriesAndTopics(forumId)
POST  /-/save-category          controllers.ForumController.saveCategory
GET   /-/load-category          controllers.ForumController.loadCategoryToEdit(id: Int)
POST  /-/delete-category        controllers.ForumController.deleteCategory
POST  /-/undelete-category      controllers.ForumController.undeleteCategory

GET   /-/redir-to-about         controllers.ForumController.redirectToAboutPage(categoryId: Option[Int])

POST  /-/create-page            controllers.PageController.createPage
POST  /-/pin-page               controllers.PageController.pinPage
POST  /-/unpin-page             controllers.PageController.unpinPage
POST  /-/cycle-page-done        controllers.PageController.cyclePageDone
POST  /-/toggle-page-closed     controllers.PageController.togglePageClosed
POST  /-/delete-pages           controllers.PageController.deletePages
POST  /-/undelete-pages         controllers.PageController.undeletePages
POST  /-/accept-answer          controllers.PageController.acceptAnswer
POST  /-/unaccept-answer        controllers.PageController.unacceptAnswer
POST  /-/add-users-to-page      controllers.PageController.addUsersToPage
POST  /-/remove-users-from-page controllers.PageController.removeUsersFromPage
POST  /-/join-page              controllers.PageController.joinPage
POST  /-/leave-page             controllers.PageController.leavePage

POST  /-/reply                  controllers.ReplyController.handleReply
POST  /-/chat                   controllers.ReplyController.handleChatMessage

POST  /-/upsert-draft           controllers.DraftsController.upsertDraft
POST  /-/upsert-draft-text      controllers.DraftsController.upsertDraftBeacon
GET   /-/list-drafts            controllers.DraftsController.listDrafts(userId: Int)
POST  /-/delete-drafts          controllers.DraftsController.deleteDrafts
POST  /-/delete-drafts-text     controllers.DraftsController.deleteDraftsBeacon

POST  /-/submit-custom-form-as-json-reply controllers.CustomFormController.handleJsonReply
POST  /-/submit-custom-form-as-new-topic  controllers.CustomFormController.handleNewTopic

# UsabilityTestingExchangeController = [plugin]
POST  /-/submit-usability-testing-form    ed.plugins.utx.UsabilityTestingExchangeController.handleUsabilityTestingForm
GET   /-/utx-pick-a-task        ed.plugins.utx.UsabilityTestingExchangeController.pickTask(categorySlug)

POST  /-/vote                   controllers.VoteController.handleVotes
GET   /-/load-voters            controllers.VoteController.loadVoters(postId: Int, voteType: Int)
POST  /-/flag                   controllers.Application.flag

GET   /-/load-draft-and-guidelines controllers.EditController.loadDraftAndGuidelines(writingWhat: Int, draftType: Int, pageRole: Int, categoryId: Option[Int], toUserId: Option[Int], pageId: Option[String], postNr: Option[Int])
GET   /-/load-draft-and-text    controllers.EditController.loadDraftAndText(pageId, postNr: Int)
POST  /-/edit                   controllers.EditController.edit
POST  /-/edit-title-save-settings controllers.PageTitleSettingsController.editTitleSaveSettings
GET   /-/onebox                 controllers.EditController.onebox(url)
POST  /-/change-post-type       controllers.EditController.changePostType
POST  /-/edit-post-settings     controllers.EditController.editPostSettings
POST  /-/delete-post            controllers.EditController.deletePost
POST  /-/move-post              controllers.EditController.movePost

GET   /-/load-post-revisions    controllers.EditController.loadPostRevisions(postId: Int, revisionNr)

POST  /-/start-private-group-talk controllers.GroupTalkController.sendMessage

POST  /-/upload-public-file     controllers.UploadsController.uploadPublicFile
POST  /-/upload-avatar          controllers.UploadsController.uploadAvatar(userId: Int)
POST  /-/remove-avatar          controllers.UploadsController.removeAvatar
# CLEAN_UP RENAME to auth-download? or auth-upload-download?
GET   /-/auth-upload/:publSiteId/*hashPath controllers.UploadsController.authUpload(publSiteId, hashPath)

# CLEAN_UP remove, hardcode path in Globals instead?  [2KGLCQ4]
GET   /-/u/*relativePath        controllers.UploadsController.servePublicFile(relativePath)
#GET   /-/uploads/public/*relativePath controllers.UploadsController.servePublicFileLong(relativePath)

# Merge with CloseCollapseController into PostController?
# POST  /-/pin-at-position      controllers.PinController.pinAtPosition
POST  /-/hide-post              controllers.CloseCollapseController.hidePost
POST  /-/collapse-post          controllers.CloseCollapseController.collapsePost
POST  /-/collapse-tree          controllers.CloseCollapseController.collapseTree
POST  /-/close-tree             controllers.CloseCollapseController.closeTree
#POST  /-/reopen-tree            controllers.CloseCollapseController.reopenTree

POST  /-/import-site            controllers.ImportExportController.importSiteJson(deleteOldSite: Option[Boolean])
POST  /-/import-test-site       controllers.ImportExportController.importTestSite

POST /-/play-time               controllers.DebugTestController.playTime
POST /-/log-browser-errors      controllers.DebugTestController.logBrowserErrors
GET  /-/metrics                 controllers.DebugTestController.showMetrics
GET  /-/build-info              controllers.DebugTestController.showBuildInfo
GET  /-/ping-exception-action   controllers.DebugTestController.pingExceptionAction
GET  /-/ping-session-action     controllers.DebugTestController.pingApiAction
GET  /-/ping-cache              controllers.DebugTestController.pingCache
GET  /-/ping-database-and-cache controllers.DebugTestController.pingDatabaseAndCache
GET  /-/origin                  controllers.DebugTestController.origin
GET  /-/are-scripts-ready       controllers.DebugTestController.areScriptsReady
GET  /-/create-deadlock         controllers.DebugTestController.createDeadlock
GET  /-/last-e2e-test-email     controllers.DebugTestController.showLastE2eTestEmailSent(siteId: Int, sentTo)
GET  /-/num-e2e-test-emails-sent controllers.DebugTestController.numE2eTestEmailSent(siteId: Int)
GET  /-/log-funny-messages      controllers.DebugTestController.logFunnyLogMessages()
GET  /-/page-top-score          controllers.DebugTestController.showPagePopularityStats(pageId)
GET  /-/pubsub-state            controllers.DebugTestController.showPubSubSubscribers(siteId: Option[Int])

GET   /-/site/:pubSiteId/*file  controllers.SiteAssetBundlesController.customAsset(pubSiteId, file)
GET   /-/site/*file             controllers.SiteAssetBundlesController.at(file)

GET   /-/tags                   controllers.TagsController.redirect
GET   /-/tags/                  controllers.TagsController.tagsApp(clientRoute = "")
GET   /-/tags/*clientRoute      controllers.TagsController.tagsApp(clientRoute)
GET   /-/load-all-tags          controllers.TagsController.loadAllTags
GET   /-/load-tags-and-stats    controllers.TagsController.loadTagsAndStats
POST  /-/set-tag-notf-level     controllers.TagsController.setTagNotfLevel
GET   /-/load-my-tag-notf-levels controllers.TagsController.loadMyTagNotfLevels
POST  /-/add-remove-tags        controllers.TagsController.addRemoveTags

GET   /-/sa                      controllers.SuperAdminController.redirect
GET   /-/super-admin             controllers.SuperAdminController.redirect
GET   /-/super-admin/            controllers.SuperAdminController.redirect
GET   /-/superadmin              controllers.SuperAdminController.redirect
GET   /-/superadmin/             controllers.SuperAdminController.superAdminApp(clientRoute = "")
GET   /-/superadmin/*clientRoute controllers.SuperAdminController.superAdminApp(clientRoute)
GET   /-/list-sites              controllers.SuperAdminController.listSites
POST  /-/update-sites            controllers.SuperAdminController.updateSites

GET   /-/list-api-secrets       controllers.ApiSecretsController.listApiSecrets
POST  /-/create-api-secret      controllers.ApiSecretsController.createApiSecret
POST  /-/delete-api-secrets     controllers.ApiSecretsController.deleteApiSecrets
GET   /-/v0/*apiEndpoint        controllers.ApiV0Controller.getFromApi(apiEndpoint)
POST  /-/v0/*apiEndpoint        controllers.ApiV0Controller.postToApi(apiEndpoint)

GET   /-/load-post              controllers.ViewPageController.loadPost(pageId: String, postNr: Int)

# Don't change the URL on the next line. The /-/assets/<version-number>/ is
# updated by the deployment script (asset fingerprinting).
GET   /-/assets/271/*file       controllers.Assets.at(path = "/public/res", file)
GET   /robots.txt               controllers.Assets.at(path = "/public", file = "robots.txt")

# These endpoints are linked from embedded comments HTML:  [2WPGKS04]
# Ensure they aren't cached for too long. [2WBKP46]
GET   /-/talkyard-comments.js     controllers.Assets.at(path = "/public/res", file = "ed-comments.js")
GET   /-/talkyard-comments.min.js controllers.Assets.at(path = "/public/res", file = "ed-comments.min.js")
# Old names: [2EBG05]
GET   /-/ed-comments.js         controllers.Assets.at(path = "/public/res", file = "ed-comments.js")
GET   /-/ed-comments.v0.js      controllers.Assets.at(path = "/public/res", file = "ed-comments.js")
GET   /-/ed-comments.min.js     controllers.Assets.at(path = "/public/res", file = "ed-comments.min.js")
GET   /-/ed-comments.v0.min.js  controllers.Assets.at(path = "/public/res", file = "ed-comments.min.js")

GET   /-/*file                  controllers.Assets.at(path = "/public", file)
GET   /favicon.ico              controllers.Assets.at(path = "/public/img", file = "debiki-favicon.ico")

# COULD remove? use only /-/track-reading-activity ?
POST  /-/mark-as-seen           controllers.ViewPageController.markPageAsSeen(pageId)
GET   /*path                    controllers.ViewPageController.viewPage(path)
GET   /                         controllers.ViewPageController.viewPage(path = "")
